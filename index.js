const { readdirSync, writeFileSync } = require("fs");
const { join } = require("path");
const Plot = require("plotly-notebook-js");
const puppeteer = require("puppeteer");

async function main() {
  const algosBatchs = readdirSync(join(__dirname, "algos"))
    .filter((f) => f.endsWith(".js"))
    .map((f) => require(join(__dirname, "algos", f)));
  const plots = [];

  for (const algoBatch of algosBatchs) {
    const { name, algos, test, testCases } = algoBatch;
    console.log(`Running ${name}...`);
    for (const algoKey in algos) {
      const timings = {};
      const errorRates = {};
      let errorRate = 0;
      for (const testCase in testCases) {
        const start = Date.now();
        const testResult = test(algos[algoKey], testCase);
        if (testResult === null) {
          // incapable
          break;
        }
        if (!testResult) {
          errorRate++;
        }
        timings[testCase] = Date.now() - start;
        errorRates[testCase] = errorRate;
      }
      const algoPlot = Plot.createPlot(
        [
          {
            x: Object.keys(timings),
            y: Object.values(timings),
            name: "timings",
          },
          {
            x: Object.keys(errorRates),
            y: Object.values(errorRates),
            name: "error_rate",
          },
        ],
        {
          title: "algo run",
          xaxis: {
            title: "testcase",
            showline: true,
            mirror: "allticks",
            ticks: "inside",
          },
          yaxis: {
            title: "time (ms)",
            showline: true,
            mirror: "allticks",
            ticks: "inside",
          },
        },
      );

      const plotHtml = algoPlot.render();

      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.setViewport({
        width: 960,
        height: 760,
        deviceScaleFactor: 1,
      });
      await page.setContent(plotHtml);
      const filename = `${name}_${algoKey}.png`;
      plots.push(filename);
      await page.screenshot({ path: join("./plots", filename) });
      await browser.close();
    }
  }

  let readmeData = "# Plots generated by `./algos/*.js`\n";
  for (const plot of plots) {
    readmeData += `##${plot}\n![${plot}](./plots/${plot})\n\n`;
  }
  writeFileSync(join(__dirname, "README.md"), readmeData);
}

main();
